# -*- coding: utf-8 -*-
"""Sequential_posture.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1h8tM2MOCn1m1vM32oDKXF-zXo0iWCnI6
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler

def distance_2d(x1, y1, x2, y2):
    return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)

def angle_abc(ax, ay, bx, by, cx, cy):
    ab_x = ax - bx
    ab_y = ay - by
    cb_x = cx - bx
    cb_y = cy - by

    dot = ab_x * cb_x + ab_y * cb_y
    mag_ab = np.sqrt(ab_x**2 + ab_y**2)
    mag_cb = np.sqrt(cb_x**2 + cb_y**2)

    if mag_ab == 0 or mag_cb == 0:
        return 180.0

    cos_theta = dot / (mag_ab * mag_cb)
    cos_theta = np.clip(cos_theta, -1.0, 1.0)
    return np.arccos(cos_theta) * 180 / np.pi

def extract_features(row, video_width=100, video_height=100):  # Assuming 100x100 for normalization
    nose_x = row['nose_x'] / video_width
    nose_y = row['nose_y'] / video_height
    lsho_x = row['left_shoulder_x'] / video_width
    lsho_y = row['left_shoulder_y'] / video_height
    rsho_x = row['right_shoulder_x'] / video_width
    rsho_y = row['right_shoulder_y'] / video_height
    lear_x = row['left_ear_x'] / video_width
    lear_y = row['left_ear_y'] / video_height
    rear_x = row['right_ear_x'] / video_width
    rear_y = row['right_ear_y'] / video_height

    msho_x = (lsho_x + rsho_x) / 2
    msho_y = (lsho_y + rsho_y) / 2

    dist_nose_shoulders = distance_2d(nose_x, nose_y, msho_x, msho_y)
    shoulder_width = distance_2d(lsho_x, lsho_y, rsho_x, rsho_y)
    ratio_nose_shoulders = dist_nose_shoulders / shoulder_width if shoulder_width > 0 else 0

    neck_tilt_angle = angle_abc(lear_x, lear_y, nose_x, nose_y, rear_x, rear_y)
    dist_left_ear_nose = distance_2d(lear_x, lear_y, nose_x, nose_y)
    dist_right_ear_nose = distance_2d(rear_x, rear_y, nose_x, nose_y)
    angle_left_shoulder = angle_abc(lear_x, lear_y, lsho_x, lsho_y, nose_x, nose_y)
    angle_right_shoulder = angle_abc(rear_x, rear_y, rsho_x, rsho_y, nose_x, nose_y)

    features = [
        dist_nose_shoulders,
        ratio_nose_shoulders,
        neck_tilt_angle,
        dist_left_ear_nose,
        dist_right_ear_nose,
        angle_left_shoulder,
        angle_right_shoulder
    ]
    return features

def create_model(input_shape):
    model = tf.keras.models.Sequential([
        tf.keras.layers.Dense(16, activation='relu', input_shape=(input_shape,)),
        tf.keras.layers.Dense(16, activation='relu'),
        tf.keras.layers.Dense(1, activation='sigmoid')
    ])
    model.compile(optimizer=tf.keras.optimizers.Adam(0.001),
                  loss='mean_squared_error')
    return model

def train_model(filepath):
    df = pd.read_csv(filepath)

    X_data = []
    y_data = df['label'].values / 100.0 #normalize the label.

    for index, row in df.iterrows():
        features = extract_features(row)
        X_data.append(features)

    X_data = np.array(X_data)

    X_train, X_test, y_train, y_test = train_test_split(X_data, y_data, test_size=0.2, random_state=42)

    model = create_model(X_train.shape[1])

    model.fit(X_train, y_train, epochs=100, batch_size=8, validation_split=0.1, verbose=1)

    loss = model.evaluate(X_test, y_test)
    print(f"Test Loss: {loss}")

    model.save('posture_model.h5')
    print("Model saved as posture_model.h5")

if __name__ == "__main__":
    train_model('/content/posture_data.csv') #replace 'your_data.csv' with the name of your file.

loaded_model = tf.keras.models.load_model('posture_model.h5')

file_path = "/content/posture_data.csv"
df = pd.read_csv(file_path)
new_data = df.iloc[0] #example new data
new_features = extract_features(new_data)
prediction = loaded_model.predict(np.array([new_features]))
print(prediction*100) #unnormalize.